# -*- coding: utf-8 -*-
"""SolunaHotel

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15s6IYsDoWeg-YVvlFr2Vg2JfPVviHKX4
"""

import os
import csv

# Crear carpeta data
os.makedirs("data", exist_ok=True)

# Crear archivos base si no existen
def crear_archivos_iniciales():
    if not os.path.exists("data/huespedes.csv"):
        with open("data/huespedes.csv", "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["documento", "nombre", "apellido", "email", "telefono"])

    if not os.path.exists("data/reservas.csv"):
        with open("data/reservas.csv", "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["documento", "tipo", "num_habitacion", "fecha_ingreso", "fecha_salida", "noches", "costo"])

    if not os.path.exists("data/habitaciones.csv"):
        with open("data/habitaciones.csv", "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["num_habitacion", "tipo", "estado"])
            writer.writerows([
                [101, "estandar", "disponible"],
                [102, "estandar", "disponible"],
                [201, "suite", "disponible"],
                [202, "suite", "disponible"]
            ])

    if not os.path.exists("data/usuarios_admin.txt"):
        with open("data/usuarios_admin.txt", "w", encoding="utf-8") as f:
            f.write("admin,1234\n")

    if not os.path.exists("data/eventos.log"):
        with open("data/eventos.log", "w", encoding="utf-8") as f:
            f.write("")

crear_archivos_iniciales()
print("✅ Archivos y carpetas base creadas correctamente.")

import os
import platform
from datetime import datetime

RUTA_LOG = "data/eventos.log"

def registrar_evento(mensaje):
    """
    Registra un evento con marca de tiempo, usuario y sistema operativo.
    Adaptado para Google Colab.
    """
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    sistema = platform.system()
    usuario = os.getenv("USER", "colab_user")
    linea = f"[{timestamp}] ({usuario} - {sistema}) {mensaje}"

    with open(RUTA_LOG, "a", encoding="utf-8") as log:
        log.write(linea + "\n")

import csv
import re

RUTA_HUESPEDES = "data/huespedes.csv"

def validar_nombre_apellido(texto):
    errores = []
    if len(texto) < 3:
        errores.append("Debe tener al menos 3 letras.")
    if not texto.isalpha():
        errores.append("Solo puede contener letras.")
    return errores

def validar_documento(doc):
    errores = []
    if not doc.isdigit():
        errores.append("El documento solo puede contener números.")
    if not (3 <= len(doc) <= 15):
        errores.append("Debe tener entre 3 y 15 dígitos.")
    return errores

def validar_email(email):
    if re.match(r"[^@]+@[^@]+\.[^@]+", email):
        return []
    else:
        return ["Correo electrónico inválido."]

def validar_telefono(tel):
    errores = []
    if not tel.isdigit():
        errores.append("El teléfono solo debe tener números.")
    if not (7 <= len(tel) <= 15):
        errores.append("Debe tener entre 7 y 15 dígitos.")
    return errores

def registrar_huesped():
    print("\n📝 Registro de Huésped")

    nombre = input("Nombre: ").strip()
    apellido = input("Apellido: ").strip()
    documento = input("Documento de identidad: ").strip()
    email = input("Correo electrónico: ").strip()
    telefono = input("Teléfono: ").strip()

    errores = {
        "Nombre": validar_nombre_apellido(nombre),
        "Apellido": validar_nombre_apellido(apellido),
        "Documento": validar_documento(documento),
        "Email": validar_email(email),
        "Teléfono": validar_telefono(telefono)
    }

    errores_encontrados = False
    for campo, errs in errores.items():
        if errs:
            errores_encontrados = True
            print(f"❌ Errores en {campo}:")
            for e in errs:
                print(f"  - {e}")

    if errores_encontrados:
        print("⚠️ Por favor corrija los errores e intente nuevamente.\n")
        return

    # Verificar si ya existe
    with open(RUTA_HUESPEDES, "r", encoding="utf-8") as file:
        for row in csv.DictReader(file):
            if row["documento"] == documento:
                print("⚠️ Este huésped ya está registrado.")
                return

    # Guardar
    with open(RUTA_HUESPEDES, "a", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow([documento, nombre, apellido, email, telefono])

    print("✅ Huésped registrado exitosamente.")
    registrar_evento(f"Registro de huésped: {documento} - {nombre} {apellido}")

import csv
from datetime import datetime, timedelta

RUTA_HUESPEDES = "data/huespedes.csv"
RUTA_HABITACIONES = "data/habitaciones.csv"
RUTA_RESERVAS = "data/reservas.csv"

def leer_huespedes():
    with open(RUTA_HUESPEDES, newline='', encoding="utf-8") as f:
        return list(csv.DictReader(f))

def leer_habitaciones():
    with open(RUTA_HABITACIONES, newline='', encoding="utf-8") as f:
        return list(csv.DictReader(f))

def guardar_reserva(reserva):
    with open(RUTA_RESERVAS, "a", newline='', encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(reserva)

def actualizar_estado_habitacion(num_habitacion, nuevo_estado):
    habitaciones = leer_habitaciones()
    for h in habitaciones:
        if h["num_habitacion"] == str(num_habitacion):
            h["estado"] = nuevo_estado

    with open(RUTA_HABITACIONES, "w", newline='', encoding="utf-8") as f:
        writer = csv.DictWriter(f, fieldnames=["num_habitacion", "tipo", "estado"])
        writer.writeheader()
        writer.writerows(habitaciones)

def calcular_costo(tipo, noches):
    if tipo == "estandar":
        return noches * 120000
    elif tipo == "suite":
        return noches * 250000
    else:
        return 0

def realizar_reserva():
    print("\n📅 Realizar Reserva")
    documento = input("Documento del huésped: ").strip()

    # Verificar si el huésped está registrado
    huespedes = leer_huespedes()
    if not any(h["documento"] == documento for h in huespedes):
        print("❌ Huésped no registrado. Regístrelo primero.")
        return

    tipo = input("Tipo de habitación (estandar/suite): ").lower().strip()
    if tipo not in ["estandar", "suite"]:
        print("❌ Tipo inválido.")
        return

    fecha_ingreso_str = input("Fecha de ingreso (YYYY-MM-DD): ").strip()
    try:
        fecha_ingreso = datetime.strptime(fecha_ingreso_str, "%Y-%m-%d")
    except ValueError:
        print("❌ Fecha inválida.")
        return

    try:
        noches = int(input("Número de noches de estancia: "))
        if noches < 1:
            print("❌ Debe reservar al menos 1 noche.")
            return
    except ValueError:
        print("❌ Número de noches inválido.")
        return

    fecha_salida = fecha_ingreso + timedelta(days=noches)

    # Buscar habitación disponible
    habitaciones = leer_habitaciones()
    disponibles = [h for h in habitaciones if h["tipo"] == tipo and h["estado"] == "disponible"]

    if not disponibles:
        print("❌ No hay habitaciones disponibles de ese tipo.")
        return

    habitacion = disponibles[0]  # Tomamos la primera disponible
    num_hab = habitacion["num_habitacion"]
    costo = calcular_costo(tipo, noches)

    # Guardar reserva
    reserva = [
        documento,
        tipo,
        num_hab,
        fecha_ingreso.strftime("%Y-%m-%d"),
        fecha_salida.strftime("%Y-%m-%d"),
        noches,
        costo
    ]
    guardar_reserva(reserva)
    actualizar_estado_habitacion(num_hab, "ocupada")

    print("\n✅ Reserva confirmada. Comprobante:")
    print(f"  Huésped: {documento}")
    print(f"  Habitación: {tipo} #{num_hab}")
    print(f"  Ingreso: {fecha_ingreso.date()}")
    print(f"  Salida: {fecha_salida.date()}")
    print(f"  Noches: {noches}")
    print(f"  Total estimado: ${costo:,.0f}")

import csv
from datetime import datetime
# Ya tenemos registrar_evento en memoria por Celda 2


RUTA_RESERVAS = "data/reservas.csv"
RUTA_HUESPEDES = "data/huespedes.csv"
RUTA_HABITACIONES = "data/habitaciones.csv"

def leer_reservas():
    with open(RUTA_RESERVAS, newline='', encoding="utf-8") as f:
        return list(csv.DictReader(f))

def leer_huespedes():
    with open(RUTA_HUESPEDES, newline='', encoding="utf-8") as f:
        return list(csv.DictReader(f))

def actualizar_estado_habitacion(num_habitacion, nuevo_estado):
    with open(RUTA_HABITACIONES, newline='', encoding="utf-8") as f:
        habitaciones = list(csv.DictReader(f))

    for h in habitaciones:
        if h["num_habitacion"] == str(num_habitacion):
            h["estado"] = nuevo_estado

    with open(RUTA_HABITACIONES, "w", newline='', encoding="utf-8") as f:
        writer = csv.DictWriter(f, fieldnames=["num_habitacion", "tipo", "estado"])
        writer.writeheader()
        writer.writerows(habitaciones)

def registrar_salida():
    print("\n🏁 Registro de Salida (Check-Out)")
    documento = input("Documento del huésped: ").strip()

    reservas = leer_reservas()
    reserva_activa = None
    for r in reservas:
        if r["documento"] == documento:
            reserva_activa = r
            break

    if not reserva_activa:
        print("❌ No se encontró ninguna reserva activa para ese documento.")
        return

    tipo = reserva_activa["tipo"]
    num_hab = reserva_activa["num_habitacion"]
    fecha_ingreso = datetime.strptime(reserva_activa["fecha_ingreso"], "%Y-%m-%d")
    fecha_salida_estimada = datetime.strptime(reserva_activa["fecha_salida"], "%Y-%m-%d")
    noches_reservadas = int(reserva_activa["noches"])
    costo_reservado = int(reserva_activa["costo"])

    # Por simplicidad asumimos que se sale en la fecha estimada
    fecha_salida_real = datetime.now()
    dias_hospedados = max(1, (fecha_salida_real - fecha_ingreso).days)

    if tipo == "estandar":
        tarifa = 120000
    elif tipo == "suite":
        tarifa = 250000
    else:
        tarifa = 0

    costo_total = max(tarifa, dias_hospedados * tarifa)  # mínimo una noche

    # Buscar datos del huésped
    huespedes = leer_huespedes()
    huesped = next((h for h in huespedes if h["documento"] == documento), None)

    # Mostrar factura
    print("\n🧾 FACTURA")
    print(f"Nombre: {huesped['nombre']} {huesped['apellido']}")
    print(f"Documento: {documento}")
    print(f"Tipo de habitación: {tipo}")
    print(f"Número habitación: {num_hab}")
    print(f"Fecha de ingreso: {fecha_ingreso.date()}")
    print(f"Fecha de salida: {fecha_salida_real.date()}")
    print(f"Noches hospedadas: {dias_hospedados}")
    print(f"Total a pagar: ${costo_total:,.0f}")

    # Actualizar estado de la habitación
    actualizar_estado_habitacion(num_hab, "disponible")

    registrar_evento(f"Check-out: {documento}, habitación {num_hab}, total ${costo_total}")

import csv
from getpass import getpass
from datetime import datetime
# from utils import registrar_evento


RUTA_HUESPEDES = "data/huespedes.csv"
RUTA_RESERVAS = "data/reservas.csv"
RUTA_HABITACIONES = "data/habitaciones.csv"
RUTA_USUARIOS = "data/usuarios_admin.txt"

def login_admin():
    print("\n🔐 Ingreso al módulo administrativo")
    usuario = input("Usuario: ").strip()

    # ⚠️ Reemplazar getpass por input en Colab
    # clave = getpass("Contraseña: ").strip()
    clave = input("Contraseña (visible en Colab): ").strip()

    with open(RUTA_USUARIOS, "r", encoding="utf-8") as f:
        for linea in f:
            u, c = linea.strip().split(",")
            if u == usuario and c == clave:
                print("✅ Acceso concedido.")
                registrar_evento(f"Acceso al módulo admin: {usuario}")
                return True

    print("❌ Usuario o contraseña incorrectos.")
    return False

def mostrar_reportes():
    print("\n📊 Reportes del Administrador")
    with open(RUTA_HUESPEDES, newline='', encoding="utf-8") as f:
        huespedes = list(csv.DictReader(f))

    with open(RUTA_RESERVAS, newline='', encoding="utf-8") as f:
        reservas = list(csv.DictReader(f))

    with open(RUTA_HABITACIONES, newline='', encoding="utf-8") as f:
        habitaciones = list(csv.DictReader(f))

    total_huespedes = len(huespedes)
    ocupadas = sum(1 for h in habitaciones if h["estado"] == "ocupada")
    disponibles = sum(1 for h in habitaciones if h["estado"] == "disponible")
    total_ingresos = sum(int(r["costo"]) for r in reservas)
    total_estancias = len(reservas)
    promedio_noches = sum(int(r["noches"]) for r in reservas) / total_estancias if total_estancias > 0 else 0

    # Noches por huésped
    noches_por_huesped = {}
    for r in reservas:
        noches_por_huesped[r["documento"]] = noches_por_huesped.get(r["documento"], 0) + int(r["noches"])

    huesped_max = max(noches_por_huesped.items(), key=lambda x: x[1], default=(None, 0))
    huesped_min = min(noches_por_huesped.items(), key=lambda x: x[1], default=(None, 0))

    def nombre_por_doc(doc):
        for h in huespedes:
            if h["documento"] == doc:
                return f'{h["nombre"]} {h["apellido"]}'
        return "Desconocido"

    print(f"👤 Total huéspedes registrados: {total_huespedes}")
    print(f"🏨 Habitaciones ocupadas: {ocupadas}")
    print(f"✅ Habitaciones disponibles: {disponibles}")
    print(f"💵 Ingresos totales: ${total_ingresos:,.0f}")
    print(f"📅 Tiempo promedio de estancia: {promedio_noches:.2f} noches")
    print(f"🧾 Total reservas: {total_estancias}")
    print(f"👑 Huésped con más noches: {nombre_por_doc(huesped_max[0])} ({huesped_max[1]} noches)")
    print(f"🥇 Huésped con menos noches: {nombre_por_doc(huesped_min[0])} ({huesped_min[1]} noches)")
    print("\n📖 Historial de huéspedes:")
    for r in reservas:
        print(f" - {r['documento']} → {r['tipo']} #{r['num_habitacion']} ({r['fecha_ingreso']} a {r['fecha_salida']})")

import csv
import matplotlib.pyplot as plt
from datetime import datetime
from collections import Counter

RUTA_HUESPEDES = "data/huespedes.csv"
RUTA_RESERVAS = "data/reservas.csv"
RUTA_HABITACIONES = "data/habitaciones.csv"

def cargar_datos():
    with open(RUTA_HUESPEDES, newline='', encoding='utf-8') as f:
        huespedes = list(csv.DictReader(f))
    with open(RUTA_RESERVAS, newline='', encoding='utf-8') as f:
        reservas = list(csv.DictReader(f))
    with open(RUTA_HABITACIONES, newline='', encoding='utf-8') as f:
        habitaciones = list(csv.DictReader(f))
    return huespedes, reservas, habitaciones

def graficar_reportes():
    huespedes, reservas, habitaciones = cargar_datos()

    # Preprocesamiento
    estandar_ocupadas = sum(1 for h in habitaciones if h["tipo"] == "estandar" and h["estado"] == "ocupada")
    suite_ocupadas = sum(1 for h in habitaciones if h["tipo"] == "suite" and h["estado"] == "ocupada")

    ocupadas = sum(1 for h in habitaciones if h["estado"] == "ocupada")
    disponibles = sum(1 for h in habitaciones if h["estado"] == "disponible")

    fechas_checkout = [r["fecha_salida"] for r in reservas]
    checkout_por_dia = Counter(fechas_checkout)

    noches_por_doc = {}
    ingresos_por_doc = {}
    fechas_ingreso = []
    ingresos_dia = {}
    huespedes_dia = {}

    for r in reservas:
        doc = r["documento"]
        noches = int(r["noches"])
        costo = int(r["costo"])
        fecha_in = r["fecha_ingreso"]
        noches_por_doc[doc] = noches_por_doc.get(doc, 0) + noches
        ingresos_por_doc[doc] = ingresos_por_doc.get(doc, 0) + costo
        fechas_ingreso.append(fecha_in)
        ingresos_dia[fecha_in] = ingresos_dia.get(fecha_in, 0) + costo
        huespedes_dia[fecha_in] = huespedes_dia.get(fecha_in, 0) + 1

    # Gráfica 1: Barras – habitaciones ocupadas por tipo
    plt.figure(figsize=(5,4))
    plt.bar(["Estándar", "Suite"], [estandar_ocupadas, suite_ocupadas], color=["skyblue", "gold"])
    plt.title("Habitaciones ocupadas por tipo")
    plt.ylabel("Cantidad")
    plt.show()

    # Gráfica 2: Pie – ocupadas vs disponibles
    plt.figure(figsize=(5,5))
    plt.pie([ocupadas, disponibles], labels=["Ocupadas", "Disponibles"], autopct='%1.1f%%', colors=["tomato", "lightgreen"])
    plt.title("Distribución de ocupación")
    plt.show()

    # Gráfica 3: Línea – Check-out por día
    fechas_sorted = sorted(checkout_por_dia)
    valores = [checkout_por_dia[f] for f in fechas_sorted]
    plt.figure(figsize=(7,4))
    plt.plot(fechas_sorted, valores, marker='o', linestyle='-', color='purple')
    plt.xticks(rotation=45)
    plt.title("Check-outs por día")
    plt.ylabel("Cantidad")
    plt.tight_layout()
    plt.show()

    # Gráfica 4: Barras horizontales – top 10 noches por huésped
    top10_noches = sorted(noches_por_doc.items(), key=lambda x: x[1], reverse=True)[:10]
    docs, noches = zip(*top10_noches)
    plt.figure(figsize=(7,5))
    plt.barh(docs, noches, color="steelblue")
    plt.xlabel("Noches")
    plt.title("Top 10 huéspedes por noches")
    plt.gca().invert_yaxis()
    plt.show()

    # Gráfica 5: Dispersión – noches vs valor pagado
    plt.figure(figsize=(6,5))
    x = list(noches_por_doc.values())
    y = list(ingresos_por_doc.values())
    plt.scatter(x, y, color="darkorange")
    plt.xlabel("Noches")
    plt.ylabel("Valor pagado")
    plt.title("Relación noches y pago")
    plt.show()

    # Gráfica 6: Pastel – ingresos por tipo de habitación
    ingresos_estandar = sum(int(r["costo"]) for r in reservas if r["tipo"] == "estandar")
    ingresos_suite = sum(int(r["costo"]) for r in reservas if r["tipo"] == "suite")
    plt.figure(figsize=(5,5))
    plt.pie([ingresos_estandar, ingresos_suite], labels=["Estándar", "Suite"], autopct="%1.1f%%", colors=["skyblue", "gold"])
    plt.title("Ingresos por tipo de habitación")
    plt.show()

    # Gráfica 7: Histograma – duración de estancias
    duraciones = [int(r["noches"]) for r in reservas]
    plt.figure(figsize=(6,4))
    plt.hist(duraciones, bins=range(1, max(duraciones)+2), color="slateblue", edgecolor="white")
    plt.title("Distribución de noches")
    plt.xlabel("Noches")
    plt.ylabel("Cantidad")
    plt.show()

    # Gráfica 8: Barras + línea – ingresos y huéspedes por día
    fechas_sorted = sorted(ingresos_dia)
    ingresos = [ingresos_dia[f] for f in fechas_sorted]
    huespedes = [huespedes_dia[f] for f in fechas_sorted]

    fig, ax1 = plt.subplots(figsize=(7,4))
    ax1.bar(fechas_sorted, ingresos, color='mediumseagreen', label="Ingresos")
    ax2 = ax1.twinx()
    ax2.plot(fechas_sorted, huespedes, color='crimson', marker='o', label="Huéspedes")

    ax1.set_ylabel("Ingresos")
    ax2.set_ylabel("Cantidad de huéspedes")
    ax1.set_title("Ingresos diarios y huéspedes")
    plt.xticks(rotation=45)
    fig.tight_layout()
    plt.show()

# from  huesped import registrar_huesped
# from reserva import realizar_reserva
# from checkout import registrar_salida
# from admin import login_admin, mostrar_reportes
# from graficos import graficar_reportes
# from utils import registrar_evento  # ya fue definida en Celda 2

def menu():
    while True:
        print("\n🌙 Bienvenido al Hotel Soluna 🌙")
        print("1. Registrar nuevo huésped")
        print("2. Realizar una reserva")
        print("3. Registrar salida (check-out)")
        print("4. Acceso administrador")
        print("5. Ver reportes gráficos")
        print("6. Salir")

        opcion = input("Seleccione una opción: ").strip()

        if opcion == "1":
            registrar_huesped()
        elif opcion == "2":
            realizar_reserva()
        elif opcion == "3":
            registrar_salida()
        elif opcion == "4":
            if login_admin():
                mostrar_reportes()
        elif opcion == "5":
            graficar_reportes()
        elif opcion == "6":
            print("Gracias por usar Soluna 🌠")
            registrar_evento("Programa finalizado por el usuario.")
            break
        else:
            print("Opción no válida. Intente de nuevo.")

menu()