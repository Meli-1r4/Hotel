{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOM1KCXhVnP8phbV+KKXQYb",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Meli-1r4/Hotel/blob/main/SolunaHotel.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import csv\n",
        "\n",
        "# Crear carpeta data\n",
        "os.makedirs(\"data\", exist_ok=True)\n",
        "\n",
        "# Crear archivos base si no existen\n",
        "def crear_archivos_iniciales():\n",
        "    if not os.path.exists(\"data/huespedes.csv\"):\n",
        "        with open(\"data/huespedes.csv\", \"w\", newline=\"\", encoding=\"utf-8\") as f:\n",
        "            writer = csv.writer(f)\n",
        "            writer.writerow([\"documento\", \"nombre\", \"apellido\", \"email\", \"telefono\"])\n",
        "\n",
        "    if not os.path.exists(\"data/reservas.csv\"):\n",
        "        with open(\"data/reservas.csv\", \"w\", newline=\"\", encoding=\"utf-8\") as f:\n",
        "            writer = csv.writer(f)\n",
        "            writer.writerow([\"documento\", \"tipo\", \"num_habitacion\", \"fecha_ingreso\", \"fecha_salida\", \"noches\", \"costo\"])\n",
        "\n",
        "    if not os.path.exists(\"data/habitaciones.csv\"):\n",
        "        with open(\"data/habitaciones.csv\", \"w\", newline=\"\", encoding=\"utf-8\") as f:\n",
        "            writer = csv.writer(f)\n",
        "            writer.writerow([\"num_habitacion\", \"tipo\", \"estado\"])\n",
        "            writer.writerows([\n",
        "                [101, \"estandar\", \"disponible\"],\n",
        "                [102, \"estandar\", \"disponible\"],\n",
        "                [201, \"suite\", \"disponible\"],\n",
        "                [202, \"suite\", \"disponible\"]\n",
        "            ])\n",
        "\n",
        "    if not os.path.exists(\"data/usuarios_admin.txt\"):\n",
        "        with open(\"data/usuarios_admin.txt\", \"w\", encoding=\"utf-8\") as f:\n",
        "            f.write(\"admin,1234\\n\")\n",
        "\n",
        "    if not os.path.exists(\"data/eventos.log\"):\n",
        "        with open(\"data/eventos.log\", \"w\", encoding=\"utf-8\") as f:\n",
        "            f.write(\"\")\n",
        "\n",
        "crear_archivos_iniciales()\n",
        "print(\"✅ Archivos y carpetas base creadas correctamente.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "esDUQjxvmC9h",
        "outputId": "40bcbf0a-4add-4095-aa85-a68e5b7b35eb"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Archivos y carpetas base creadas correctamente.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import platform\n",
        "from datetime import datetime\n",
        "\n",
        "RUTA_LOG = \"data/eventos.log\"\n",
        "\n",
        "def registrar_evento(mensaje):\n",
        "    \"\"\"\n",
        "    Registra un evento con marca de tiempo, usuario y sistema operativo.\n",
        "    Adaptado para Google Colab.\n",
        "    \"\"\"\n",
        "    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n",
        "    sistema = platform.system()\n",
        "    usuario = os.getenv(\"USER\", \"colab_user\")\n",
        "    linea = f\"[{timestamp}] ({usuario} - {sistema}) {mensaje}\"\n",
        "\n",
        "    with open(RUTA_LOG, \"a\", encoding=\"utf-8\") as log:\n",
        "        log.write(linea + \"\\n\")\n"
      ],
      "metadata": {
        "id": "d8BIiYF2mF_i"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import csv\n",
        "import re\n",
        "\n",
        "RUTA_HUESPEDES = \"data/huespedes.csv\"\n",
        "\n",
        "def validar_nombre_apellido(texto):\n",
        "    errores = []\n",
        "    if len(texto) < 3:\n",
        "        errores.append(\"Debe tener al menos 3 letras.\")\n",
        "    if not texto.isalpha():\n",
        "        errores.append(\"Solo puede contener letras.\")\n",
        "    return errores\n",
        "\n",
        "def validar_documento(doc):\n",
        "    errores = []\n",
        "    if not doc.isdigit():\n",
        "        errores.append(\"El documento solo puede contener números.\")\n",
        "    if not (3 <= len(doc) <= 15):\n",
        "        errores.append(\"Debe tener entre 3 y 15 dígitos.\")\n",
        "    return errores\n",
        "\n",
        "def validar_email(email):\n",
        "    if re.match(r\"[^@]+@[^@]+\\.[^@]+\", email):\n",
        "        return []\n",
        "    else:\n",
        "        return [\"Correo electrónico inválido.\"]\n",
        "\n",
        "def validar_telefono(tel):\n",
        "    errores = []\n",
        "    if not tel.isdigit():\n",
        "        errores.append(\"El teléfono solo debe tener números.\")\n",
        "    if not (7 <= len(tel) <= 15):\n",
        "        errores.append(\"Debe tener entre 7 y 15 dígitos.\")\n",
        "    return errores\n",
        "\n",
        "def registrar_huesped():\n",
        "    print(\"\\n📝 Registro de Huésped\")\n",
        "\n",
        "    nombre = input(\"Nombre: \").strip()\n",
        "    apellido = input(\"Apellido: \").strip()\n",
        "    documento = input(\"Documento de identidad: \").strip()\n",
        "    email = input(\"Correo electrónico: \").strip()\n",
        "    telefono = input(\"Teléfono: \").strip()\n",
        "\n",
        "    errores = {\n",
        "        \"Nombre\": validar_nombre_apellido(nombre),\n",
        "        \"Apellido\": validar_nombre_apellido(apellido),\n",
        "        \"Documento\": validar_documento(documento),\n",
        "        \"Email\": validar_email(email),\n",
        "        \"Teléfono\": validar_telefono(telefono)\n",
        "    }\n",
        "\n",
        "    errores_encontrados = False\n",
        "    for campo, errs in errores.items():\n",
        "        if errs:\n",
        "            errores_encontrados = True\n",
        "            print(f\"❌ Errores en {campo}:\")\n",
        "            for e in errs:\n",
        "                print(f\"  - {e}\")\n",
        "\n",
        "    if errores_encontrados:\n",
        "        print(\"⚠️ Por favor corrija los errores e intente nuevamente.\\n\")\n",
        "        return\n",
        "\n",
        "    # Verificar si ya existe\n",
        "    with open(RUTA_HUESPEDES, \"r\", encoding=\"utf-8\") as file:\n",
        "        for row in csv.DictReader(file):\n",
        "            if row[\"documento\"] == documento:\n",
        "                print(\"⚠️ Este huésped ya está registrado.\")\n",
        "                return\n",
        "\n",
        "    # Guardar\n",
        "    with open(RUTA_HUESPEDES, \"a\", newline=\"\", encoding=\"utf-8\") as file:\n",
        "        writer = csv.writer(file)\n",
        "        writer.writerow([documento, nombre, apellido, email, telefono])\n",
        "\n",
        "    print(\"✅ Huésped registrado exitosamente.\")\n",
        "    registrar_evento(f\"Registro de huésped: {documento} - {nombre} {apellido}\")\n"
      ],
      "metadata": {
        "id": "pTuOl6YsmJfU"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import csv\n",
        "from datetime import datetime, timedelta\n",
        "\n",
        "RUTA_HUESPEDES = \"data/huespedes.csv\"\n",
        "RUTA_HABITACIONES = \"data/habitaciones.csv\"\n",
        "RUTA_RESERVAS = \"data/reservas.csv\"\n",
        "\n",
        "def leer_huespedes():\n",
        "    with open(RUTA_HUESPEDES, newline='', encoding=\"utf-8\") as f:\n",
        "        return list(csv.DictReader(f))\n",
        "\n",
        "def leer_habitaciones():\n",
        "    with open(RUTA_HABITACIONES, newline='', encoding=\"utf-8\") as f:\n",
        "        return list(csv.DictReader(f))\n",
        "\n",
        "def guardar_reserva(reserva):\n",
        "    with open(RUTA_RESERVAS, \"a\", newline='', encoding=\"utf-8\") as f:\n",
        "        writer = csv.writer(f)\n",
        "        writer.writerow(reserva)\n",
        "\n",
        "def actualizar_estado_habitacion(num_habitacion, nuevo_estado):\n",
        "    habitaciones = leer_habitaciones()\n",
        "    for h in habitaciones:\n",
        "        if h[\"num_habitacion\"] == str(num_habitacion):\n",
        "            h[\"estado\"] = nuevo_estado\n",
        "\n",
        "    with open(RUTA_HABITACIONES, \"w\", newline='', encoding=\"utf-8\") as f:\n",
        "        writer = csv.DictWriter(f, fieldnames=[\"num_habitacion\", \"tipo\", \"estado\"])\n",
        "        writer.writeheader()\n",
        "        writer.writerows(habitaciones)\n",
        "\n",
        "def calcular_costo(tipo, noches):\n",
        "    if tipo == \"estandar\":\n",
        "        return noches * 120000\n",
        "    elif tipo == \"suite\":\n",
        "        return noches * 250000\n",
        "    else:\n",
        "        return 0\n",
        "\n",
        "def realizar_reserva():\n",
        "    print(\"\\n📅 Realizar Reserva\")\n",
        "    documento = input(\"Documento del huésped: \").strip()\n",
        "\n",
        "    # Verificar si el huésped está registrado\n",
        "    huespedes = leer_huespedes()\n",
        "    if not any(h[\"documento\"] == documento for h in huespedes):\n",
        "        print(\"❌ Huésped no registrado. Regístrelo primero.\")\n",
        "        return\n",
        "\n",
        "    tipo = input(\"Tipo de habitación (estandar/suite): \").lower().strip()\n",
        "    if tipo not in [\"estandar\", \"suite\"]:\n",
        "        print(\"❌ Tipo inválido.\")\n",
        "        return\n",
        "\n",
        "    fecha_ingreso_str = input(\"Fecha de ingreso (YYYY-MM-DD): \").strip()\n",
        "    try:\n",
        "        fecha_ingreso = datetime.strptime(fecha_ingreso_str, \"%Y-%m-%d\")\n",
        "    except ValueError:\n",
        "        print(\"❌ Fecha inválida.\")\n",
        "        return\n",
        "\n",
        "    try:\n",
        "        noches = int(input(\"Número de noches de estancia: \"))\n",
        "        if noches < 1:\n",
        "            print(\"❌ Debe reservar al menos 1 noche.\")\n",
        "            return\n",
        "    except ValueError:\n",
        "        print(\"❌ Número de noches inválido.\")\n",
        "        return\n",
        "\n",
        "    fecha_salida = fecha_ingreso + timedelta(days=noches)\n",
        "\n",
        "    # Buscar habitación disponible\n",
        "    habitaciones = leer_habitaciones()\n",
        "    disponibles = [h for h in habitaciones if h[\"tipo\"] == tipo and h[\"estado\"] == \"disponible\"]\n",
        "\n",
        "    if not disponibles:\n",
        "        print(\"❌ No hay habitaciones disponibles de ese tipo.\")\n",
        "        return\n",
        "\n",
        "    habitacion = disponibles[0]  # Tomamos la primera disponible\n",
        "    num_hab = habitacion[\"num_habitacion\"]\n",
        "    costo = calcular_costo(tipo, noches)\n",
        "\n",
        "    # Guardar reserva\n",
        "    reserva = [\n",
        "        documento,\n",
        "        tipo,\n",
        "        num_hab,\n",
        "        fecha_ingreso.strftime(\"%Y-%m-%d\"),\n",
        "        fecha_salida.strftime(\"%Y-%m-%d\"),\n",
        "        noches,\n",
        "        costo\n",
        "    ]\n",
        "    guardar_reserva(reserva)\n",
        "    actualizar_estado_habitacion(num_hab, \"ocupada\")\n",
        "\n",
        "    print(\"\\n✅ Reserva confirmada. Comprobante:\")\n",
        "    print(f\"  Huésped: {documento}\")\n",
        "    print(f\"  Habitación: {tipo} #{num_hab}\")\n",
        "    print(f\"  Ingreso: {fecha_ingreso.date()}\")\n",
        "    print(f\"  Salida: {fecha_salida.date()}\")\n",
        "    print(f\"  Noches: {noches}\")\n",
        "    print(f\"  Total estimado: ${costo:,.0f}\")\n"
      ],
      "metadata": {
        "id": "r5Ilt8o5mtNC"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import csv\n",
        "from datetime import datetime\n",
        "# Ya tenemos registrar_evento en memoria por Celda 2\n",
        "\n",
        "\n",
        "RUTA_RESERVAS = \"data/reservas.csv\"\n",
        "RUTA_HUESPEDES = \"data/huespedes.csv\"\n",
        "RUTA_HABITACIONES = \"data/habitaciones.csv\"\n",
        "\n",
        "def leer_reservas():\n",
        "    with open(RUTA_RESERVAS, newline='', encoding=\"utf-8\") as f:\n",
        "        return list(csv.DictReader(f))\n",
        "\n",
        "def leer_huespedes():\n",
        "    with open(RUTA_HUESPEDES, newline='', encoding=\"utf-8\") as f:\n",
        "        return list(csv.DictReader(f))\n",
        "\n",
        "def actualizar_estado_habitacion(num_habitacion, nuevo_estado):\n",
        "    with open(RUTA_HABITACIONES, newline='', encoding=\"utf-8\") as f:\n",
        "        habitaciones = list(csv.DictReader(f))\n",
        "\n",
        "    for h in habitaciones:\n",
        "        if h[\"num_habitacion\"] == str(num_habitacion):\n",
        "            h[\"estado\"] = nuevo_estado\n",
        "\n",
        "    with open(RUTA_HABITACIONES, \"w\", newline='', encoding=\"utf-8\") as f:\n",
        "        writer = csv.DictWriter(f, fieldnames=[\"num_habitacion\", \"tipo\", \"estado\"])\n",
        "        writer.writeheader()\n",
        "        writer.writerows(habitaciones)\n",
        "\n",
        "def registrar_salida():\n",
        "    print(\"\\n🏁 Registro de Salida (Check-Out)\")\n",
        "    documento = input(\"Documento del huésped: \").strip()\n",
        "\n",
        "    reservas = leer_reservas()\n",
        "    reserva_activa = None\n",
        "    for r in reservas:\n",
        "        if r[\"documento\"] == documento:\n",
        "            reserva_activa = r\n",
        "            break\n",
        "\n",
        "    if not reserva_activa:\n",
        "        print(\"❌ No se encontró ninguna reserva activa para ese documento.\")\n",
        "        return\n",
        "\n",
        "    tipo = reserva_activa[\"tipo\"]\n",
        "    num_hab = reserva_activa[\"num_habitacion\"]\n",
        "    fecha_ingreso = datetime.strptime(reserva_activa[\"fecha_ingreso\"], \"%Y-%m-%d\")\n",
        "    fecha_salida_estimada = datetime.strptime(reserva_activa[\"fecha_salida\"], \"%Y-%m-%d\")\n",
        "    noches_reservadas = int(reserva_activa[\"noches\"])\n",
        "    costo_reservado = int(reserva_activa[\"costo\"])\n",
        "\n",
        "    # Por simplicidad asumimos que se sale en la fecha estimada\n",
        "    fecha_salida_real = datetime.now()\n",
        "    dias_hospedados = max(1, (fecha_salida_real - fecha_ingreso).days)\n",
        "\n",
        "    if tipo == \"estandar\":\n",
        "        tarifa = 120000\n",
        "    elif tipo == \"suite\":\n",
        "        tarifa = 250000\n",
        "    else:\n",
        "        tarifa = 0\n",
        "\n",
        "    costo_total = max(tarifa, dias_hospedados * tarifa)  # mínimo una noche\n",
        "\n",
        "    # Buscar datos del huésped\n",
        "    huespedes = leer_huespedes()\n",
        "    huesped = next((h for h in huespedes if h[\"documento\"] == documento), None)\n",
        "\n",
        "    # Mostrar factura\n",
        "    print(\"\\n🧾 FACTURA\")\n",
        "    print(f\"Nombre: {huesped['nombre']} {huesped['apellido']}\")\n",
        "    print(f\"Documento: {documento}\")\n",
        "    print(f\"Tipo de habitación: {tipo}\")\n",
        "    print(f\"Número habitación: {num_hab}\")\n",
        "    print(f\"Fecha de ingreso: {fecha_ingreso.date()}\")\n",
        "    print(f\"Fecha de salida: {fecha_salida_real.date()}\")\n",
        "    print(f\"Noches hospedadas: {dias_hospedados}\")\n",
        "    print(f\"Total a pagar: ${costo_total:,.0f}\")\n",
        "\n",
        "    # Actualizar estado de la habitación\n",
        "    actualizar_estado_habitacion(num_hab, \"disponible\")\n",
        "\n",
        "    registrar_evento(f\"Check-out: {documento}, habitación {num_hab}, total ${costo_total}\")\n"
      ],
      "metadata": {
        "id": "JjcaPopjm_QC"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import csv\n",
        "from getpass import getpass\n",
        "from datetime import datetime\n",
        "# from utils import registrar_evento\n",
        "\n",
        "\n",
        "RUTA_HUESPEDES = \"data/huespedes.csv\"\n",
        "RUTA_RESERVAS = \"data/reservas.csv\"\n",
        "RUTA_HABITACIONES = \"data/habitaciones.csv\"\n",
        "RUTA_USUARIOS = \"data/usuarios_admin.txt\"\n",
        "\n",
        "def login_admin():\n",
        "    print(\"\\n🔐 Ingreso al módulo administrativo\")\n",
        "    usuario = input(\"Usuario: \").strip()\n",
        "\n",
        "    # ⚠️ Reemplazar getpass por input en Colab\n",
        "    # clave = getpass(\"Contraseña: \").strip()\n",
        "    clave = input(\"Contraseña (visible en Colab): \").strip()\n",
        "\n",
        "    with open(RUTA_USUARIOS, \"r\", encoding=\"utf-8\") as f:\n",
        "        for linea in f:\n",
        "            u, c = linea.strip().split(\",\")\n",
        "            if u == usuario and c == clave:\n",
        "                print(\"✅ Acceso concedido.\")\n",
        "                registrar_evento(f\"Acceso al módulo admin: {usuario}\")\n",
        "                return True\n",
        "\n",
        "    print(\"❌ Usuario o contraseña incorrectos.\")\n",
        "    return False\n",
        "\n",
        "def mostrar_reportes():\n",
        "    print(\"\\n📊 Reportes del Administrador\")\n",
        "    with open(RUTA_HUESPEDES, newline='', encoding=\"utf-8\") as f:\n",
        "        huespedes = list(csv.DictReader(f))\n",
        "\n",
        "    with open(RUTA_RESERVAS, newline='', encoding=\"utf-8\") as f:\n",
        "        reservas = list(csv.DictReader(f))\n",
        "\n",
        "    with open(RUTA_HABITACIONES, newline='', encoding=\"utf-8\") as f:\n",
        "        habitaciones = list(csv.DictReader(f))\n",
        "\n",
        "    total_huespedes = len(huespedes)\n",
        "    ocupadas = sum(1 for h in habitaciones if h[\"estado\"] == \"ocupada\")\n",
        "    disponibles = sum(1 for h in habitaciones if h[\"estado\"] == \"disponible\")\n",
        "    total_ingresos = sum(int(r[\"costo\"]) for r in reservas)\n",
        "    total_estancias = len(reservas)\n",
        "    promedio_noches = sum(int(r[\"noches\"]) for r in reservas) / total_estancias if total_estancias > 0 else 0\n",
        "\n",
        "    # Noches por huésped\n",
        "    noches_por_huesped = {}\n",
        "    for r in reservas:\n",
        "        noches_por_huesped[r[\"documento\"]] = noches_por_huesped.get(r[\"documento\"], 0) + int(r[\"noches\"])\n",
        "\n",
        "    huesped_max = max(noches_por_huesped.items(), key=lambda x: x[1], default=(None, 0))\n",
        "    huesped_min = min(noches_por_huesped.items(), key=lambda x: x[1], default=(None, 0))\n",
        "\n",
        "    def nombre_por_doc(doc):\n",
        "        for h in huespedes:\n",
        "            if h[\"documento\"] == doc:\n",
        "                return f'{h[\"nombre\"]} {h[\"apellido\"]}'\n",
        "        return \"Desconocido\"\n",
        "\n",
        "    print(f\"👤 Total huéspedes registrados: {total_huespedes}\")\n",
        "    print(f\"🏨 Habitaciones ocupadas: {ocupadas}\")\n",
        "    print(f\"✅ Habitaciones disponibles: {disponibles}\")\n",
        "    print(f\"💵 Ingresos totales: ${total_ingresos:,.0f}\")\n",
        "    print(f\"📅 Tiempo promedio de estancia: {promedio_noches:.2f} noches\")\n",
        "    print(f\"🧾 Total reservas: {total_estancias}\")\n",
        "    print(f\"👑 Huésped con más noches: {nombre_por_doc(huesped_max[0])} ({huesped_max[1]} noches)\")\n",
        "    print(f\"🥇 Huésped con menos noches: {nombre_por_doc(huesped_min[0])} ({huesped_min[1]} noches)\")\n",
        "    print(\"\\n📖 Historial de huéspedes:\")\n",
        "    for r in reservas:\n",
        "        print(f\" - {r['documento']} → {r['tipo']} #{r['num_habitacion']} ({r['fecha_ingreso']} a {r['fecha_salida']})\")\n"
      ],
      "metadata": {
        "id": "g5fD0RrGnyME"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import csv\n",
        "import matplotlib.pyplot as plt\n",
        "from datetime import datetime\n",
        "from collections import Counter\n",
        "\n",
        "RUTA_HUESPEDES = \"data/huespedes.csv\"\n",
        "RUTA_RESERVAS = \"data/reservas.csv\"\n",
        "RUTA_HABITACIONES = \"data/habitaciones.csv\"\n",
        "\n",
        "def cargar_datos():\n",
        "    with open(RUTA_HUESPEDES, newline='', encoding='utf-8') as f:\n",
        "        huespedes = list(csv.DictReader(f))\n",
        "    with open(RUTA_RESERVAS, newline='', encoding='utf-8') as f:\n",
        "        reservas = list(csv.DictReader(f))\n",
        "    with open(RUTA_HABITACIONES, newline='', encoding='utf-8') as f:\n",
        "        habitaciones = list(csv.DictReader(f))\n",
        "    return huespedes, reservas, habitaciones\n",
        "\n",
        "def graficar_reportes():\n",
        "    huespedes, reservas, habitaciones = cargar_datos()\n",
        "\n",
        "    # Preprocesamiento\n",
        "    estandar_ocupadas = sum(1 for h in habitaciones if h[\"tipo\"] == \"estandar\" and h[\"estado\"] == \"ocupada\")\n",
        "    suite_ocupadas = sum(1 for h in habitaciones if h[\"tipo\"] == \"suite\" and h[\"estado\"] == \"ocupada\")\n",
        "\n",
        "    ocupadas = sum(1 for h in habitaciones if h[\"estado\"] == \"ocupada\")\n",
        "    disponibles = sum(1 for h in habitaciones if h[\"estado\"] == \"disponible\")\n",
        "\n",
        "    fechas_checkout = [r[\"fecha_salida\"] for r in reservas]\n",
        "    checkout_por_dia = Counter(fechas_checkout)\n",
        "\n",
        "    noches_por_doc = {}\n",
        "    ingresos_por_doc = {}\n",
        "    fechas_ingreso = []\n",
        "    ingresos_dia = {}\n",
        "    huespedes_dia = {}\n",
        "\n",
        "    for r in reservas:\n",
        "        doc = r[\"documento\"]\n",
        "        noches = int(r[\"noches\"])\n",
        "        costo = int(r[\"costo\"])\n",
        "        fecha_in = r[\"fecha_ingreso\"]\n",
        "        noches_por_doc[doc] = noches_por_doc.get(doc, 0) + noches\n",
        "        ingresos_por_doc[doc] = ingresos_por_doc.get(doc, 0) + costo\n",
        "        fechas_ingreso.append(fecha_in)\n",
        "        ingresos_dia[fecha_in] = ingresos_dia.get(fecha_in, 0) + costo\n",
        "        huespedes_dia[fecha_in] = huespedes_dia.get(fecha_in, 0) + 1\n",
        "\n",
        "    # Gráfica 1: Barras – habitaciones ocupadas por tipo\n",
        "    plt.figure(figsize=(5,4))\n",
        "    plt.bar([\"Estándar\", \"Suite\"], [estandar_ocupadas, suite_ocupadas], color=[\"skyblue\", \"gold\"])\n",
        "    plt.title(\"Habitaciones ocupadas por tipo\")\n",
        "    plt.ylabel(\"Cantidad\")\n",
        "    plt.show()\n",
        "\n",
        "    # Gráfica 2: Pie – ocupadas vs disponibles\n",
        "    plt.figure(figsize=(5,5))\n",
        "    plt.pie([ocupadas, disponibles], labels=[\"Ocupadas\", \"Disponibles\"], autopct='%1.1f%%', colors=[\"tomato\", \"lightgreen\"])\n",
        "    plt.title(\"Distribución de ocupación\")\n",
        "    plt.show()\n",
        "\n",
        "    # Gráfica 3: Línea – Check-out por día\n",
        "    fechas_sorted = sorted(checkout_por_dia)\n",
        "    valores = [checkout_por_dia[f] for f in fechas_sorted]\n",
        "    plt.figure(figsize=(7,4))\n",
        "    plt.plot(fechas_sorted, valores, marker='o', linestyle='-', color='purple')\n",
        "    plt.xticks(rotation=45)\n",
        "    plt.title(\"Check-outs por día\")\n",
        "    plt.ylabel(\"Cantidad\")\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "    # Gráfica 4: Barras horizontales – top 10 noches por huésped\n",
        "    top10_noches = sorted(noches_por_doc.items(), key=lambda x: x[1], reverse=True)[:10]\n",
        "    docs, noches = zip(*top10_noches)\n",
        "    plt.figure(figsize=(7,5))\n",
        "    plt.barh(docs, noches, color=\"steelblue\")\n",
        "    plt.xlabel(\"Noches\")\n",
        "    plt.title(\"Top 10 huéspedes por noches\")\n",
        "    plt.gca().invert_yaxis()\n",
        "    plt.show()\n",
        "\n",
        "    # Gráfica 5: Dispersión – noches vs valor pagado\n",
        "    plt.figure(figsize=(6,5))\n",
        "    x = list(noches_por_doc.values())\n",
        "    y = list(ingresos_por_doc.values())\n",
        "    plt.scatter(x, y, color=\"darkorange\")\n",
        "    plt.xlabel(\"Noches\")\n",
        "    plt.ylabel(\"Valor pagado\")\n",
        "    plt.title(\"Relación noches y pago\")\n",
        "    plt.show()\n",
        "\n",
        "    # Gráfica 6: Pastel – ingresos por tipo de habitación\n",
        "    ingresos_estandar = sum(int(r[\"costo\"]) for r in reservas if r[\"tipo\"] == \"estandar\")\n",
        "    ingresos_suite = sum(int(r[\"costo\"]) for r in reservas if r[\"tipo\"] == \"suite\")\n",
        "    plt.figure(figsize=(5,5))\n",
        "    plt.pie([ingresos_estandar, ingresos_suite], labels=[\"Estándar\", \"Suite\"], autopct=\"%1.1f%%\", colors=[\"skyblue\", \"gold\"])\n",
        "    plt.title(\"Ingresos por tipo de habitación\")\n",
        "    plt.show()\n",
        "\n",
        "    # Gráfica 7: Histograma – duración de estancias\n",
        "    duraciones = [int(r[\"noches\"]) for r in reservas]\n",
        "    plt.figure(figsize=(6,4))\n",
        "    plt.hist(duraciones, bins=range(1, max(duraciones)+2), color=\"slateblue\", edgecolor=\"white\")\n",
        "    plt.title(\"Distribución de noches\")\n",
        "    plt.xlabel(\"Noches\")\n",
        "    plt.ylabel(\"Cantidad\")\n",
        "    plt.show()\n",
        "\n",
        "    # Gráfica 8: Barras + línea – ingresos y huéspedes por día\n",
        "    fechas_sorted = sorted(ingresos_dia)\n",
        "    ingresos = [ingresos_dia[f] for f in fechas_sorted]\n",
        "    huespedes = [huespedes_dia[f] for f in fechas_sorted]\n",
        "\n",
        "    fig, ax1 = plt.subplots(figsize=(7,4))\n",
        "    ax1.bar(fechas_sorted, ingresos, color='mediumseagreen', label=\"Ingresos\")\n",
        "    ax2 = ax1.twinx()\n",
        "    ax2.plot(fechas_sorted, huespedes, color='crimson', marker='o', label=\"Huéspedes\")\n",
        "\n",
        "    ax1.set_ylabel(\"Ingresos\")\n",
        "    ax2.set_ylabel(\"Cantidad de huéspedes\")\n",
        "    ax1.set_title(\"Ingresos diarios y huéspedes\")\n",
        "    plt.xticks(rotation=45)\n",
        "    fig.tight_layout()\n",
        "    plt.show()\n"
      ],
      "metadata": {
        "id": "3dC9_HxQoGhp"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# from  huesped import registrar_huesped\n",
        "# from reserva import realizar_reserva\n",
        "# from checkout import registrar_salida\n",
        "# from admin import login_admin, mostrar_reportes\n",
        "# from graficos import graficar_reportes\n",
        "# from utils import registrar_evento  # ya fue definida en Celda 2\n",
        "\n",
        "def menu():\n",
        "    while True:\n",
        "        print(\"\\n🌙 Bienvenido al Hotel Soluna 🌙\")\n",
        "        print(\"1. Registrar nuevo huésped\")\n",
        "        print(\"2. Realizar una reserva\")\n",
        "        print(\"3. Registrar salida (check-out)\")\n",
        "        print(\"4. Acceso administrador\")\n",
        "        print(\"5. Ver reportes gráficos\")\n",
        "        print(\"6. Salir\")\n",
        "\n",
        "        opcion = input(\"Seleccione una opción: \").strip()\n",
        "\n",
        "        if opcion == \"1\":\n",
        "            registrar_huesped()\n",
        "        elif opcion == \"2\":\n",
        "            realizar_reserva()\n",
        "        elif opcion == \"3\":\n",
        "            registrar_salida()\n",
        "        elif opcion == \"4\":\n",
        "            if login_admin():\n",
        "                mostrar_reportes()\n",
        "        elif opcion == \"5\":\n",
        "            graficar_reportes()\n",
        "        elif opcion == \"6\":\n",
        "            print(\"Gracias por usar Soluna 🌠\")\n",
        "            registrar_evento(\"Programa finalizado por el usuario.\")\n",
        "            break\n",
        "        else:\n",
        "            print(\"Opción no válida. Intente de nuevo.\")\n",
        "\n",
        "menu()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qVWOdTvcok6s",
        "outputId": "665c9ade-3ce1-4388-bd13-b970243cf936"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "🌙 Bienvenido al Hotel Soluna 🌙\n",
            "1. Registrar nuevo huésped\n",
            "2. Realizar una reserva\n",
            "3. Registrar salida (check-out)\n",
            "4. Acceso administrador\n",
            "5. Ver reportes gráficos\n",
            "6. Salir\n",
            "Seleccione una opción: 1\n",
            "\n",
            "📝 Registro de Huésped\n",
            "Nombre: Melissa Arquez\n",
            "Apellido: Rodriguez\n",
            "Documento de identidad: 1038098534\n",
            "Correo electrónico: rodarquez14@gmail.com\n",
            "Teléfono: 3225678890\n",
            "❌ Errores en Nombre:\n",
            "  - Solo puede contener letras.\n",
            "⚠️ Por favor corrija los errores e intente nuevamente.\n",
            "\n",
            "\n",
            "🌙 Bienvenido al Hotel Soluna 🌙\n",
            "1. Registrar nuevo huésped\n",
            "2. Realizar una reserva\n",
            "3. Registrar salida (check-out)\n",
            "4. Acceso administrador\n",
            "5. Ver reportes gráficos\n",
            "6. Salir\n",
            "Seleccione una opción: 1\n",
            "\n",
            "📝 Registro de Huésped\n",
            "Nombre: ana\n",
            "Apellido: arroyo\n",
            "Documento de identidad: 123456\n",
            "Correo electrónico: anaa@\n",
            "Teléfono: 233451\n",
            "❌ Errores en Email:\n",
            "  - Correo electrónico inválido.\n",
            "❌ Errores en Teléfono:\n",
            "  - Debe tener entre 7 y 15 dígitos.\n",
            "⚠️ Por favor corrija los errores e intente nuevamente.\n",
            "\n",
            "\n",
            "🌙 Bienvenido al Hotel Soluna 🌙\n",
            "1. Registrar nuevo huésped\n",
            "2. Realizar una reserva\n",
            "3. Registrar salida (check-out)\n",
            "4. Acceso administrador\n",
            "5. Ver reportes gráficos\n",
            "6. Salir\n"
          ]
        }
      ]
    }
  ]
}
